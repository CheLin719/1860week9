CHIP P2S {
    IN indata[4], enable, load;
    OUT sout, complete;
    
    PARTS:
    
    // 4-bit Register to store input data
    Register(in[0..3]=indata[0..3], load=load, out[0]=i0, out[1]=i1, out[2]=i2, out[3]=i3);

    // Control logic to enable shifting only when enable is active and shifting is not already occurring
    And(a=enable, b=true, out=enable1);
    
    // Detect when no shift is occurring
    Or(a=s0, b=s1, out=s00Rs1);
    Or(a=s2, b=s3, out=s20Rs3);
    Or(a=s00Rs1, b=s20Rs3, out=spins);
    Not(in=spins, out=notspins);
    And(a=enable1, b=notspins, out=Begin);
    
    // Shift register to control the sequence
    DFF(in=Begin, out=s0);
    DFF(in=s0, out=s1);
    DFF(in=s1, out=s2);
    DFF(in=s2, out=s3, out=complete);
    
    // AND gates to select the correct bit for output
    And(a=i0, b=s0, out=b0);
    And(a=i1, b=s1, out=b1);
    And(a=i2, b=s2, out=b2);
    And(a=i3, b=s3, out=b3);
    
    // OR gate to combine selected output bits
    Or(a=b0, b=b1, out=sout1);
    Or(a=b2, b=b3, out=sout2);
    Or(a=sout1, b=sout2, out=sout);
}
